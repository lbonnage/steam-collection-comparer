{"version":3,"sources":["logo.svg","components/CompareMenu.js","components/Comparison.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Compare","props","useState","newCollection","setNewCollection","collections","setCollections","collectionList","setCollectionList","InputGroup","className","Prepend","Text","id","FormControl","aria-describedby","onChange","e","target","value","Append","Button","variant","onClick","newID","indexOf","ListGroup","Item","key","console","log","Form","compare","Table","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","Comparison","React","useMemo","arr","collectionIds","Header","results","accessor","Object","entries","file","obj","name","length","toString","App","setResults","displayResults","setDisplayResults","setCollectionIds","requestOptions","method","body","JSON","stringify","fetch","then","response","json","bind","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92b867cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {useState} from 'react';\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nexport default function Compare(props) {\r\n\r\n    const [newCollection, setNewCollection] = useState('');\r\n    const [collections, setCollections] = useState([]);\r\n    const [collectionList, setCollectionList] = useState([]);\r\n\r\n    /**\r\n     * Adds a collection the the list for comparing.\r\n     */\r\n    function AddCollection(newID) {\r\n\r\n        if (collections.indexOf(newID) != -1) {\r\n            console.log(\"Error: Can't add the same collection more than once.\")\r\n            return;\r\n        }\r\n\r\n        setCollections([...collections, newID])\r\n\r\n        setCollectionList([...collectionList, <ListGroup.Item key={newID}>{newID}</ListGroup.Item>]);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <p>\r\n                    Enter the ID to a Steam Workshop Collection to add it to the list.  Press 'Compare' when ready to compare them.\r\n                </p>\r\n            </header>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon3\">\r\n                        https://steamcommunity.com/sharedfiles/filedetails/?id=\r\n                    </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl id=\"basic-url\" aria-describedby=\"basic-addon3\" onChange={e => setNewCollection(e.target.value)}/>\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\" onClick={e => AddCollection(newCollection)}>Add Collection</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <Form>\r\n                <Button variant=\"primary\" onClick={e => props.compare(collections)}>\r\n                    Compare\r\n                </Button>\r\n            </Form>\r\n            <ListGroup>\r\n                {collectionList}\r\n                {/*{collections.map(c => <ListGroup.Item key={c}>{c}</ListGroup.Item>)}*/}\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport './Comparison.css';\r\n\r\n\r\nfunction Table({ columns, data }) {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n        },\r\n        useSortBy\r\n    )\r\n\r\n    // We don't want to render all 2000 rows for this example, so cap\r\n    // it at 20 for this use case\r\n    // const firstPageRows = rows.slice(0, 20)\r\n    const firstPageRows = rows;\r\n\r\n    return (\r\n        <>\r\n            <table {...getTableProps()} className=\"Comparison\" >\r\n                <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            // Add the sorting props to control sorting. For this example\r\n                            // we can add them into the header props\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())} className=\"Comparison-header\">\r\n                                {column.render('Header')}\r\n                                {/* Add a sort direction indicator */}\r\n                                <span>\r\n                    {column.isSorted\r\n                        ? column.isSortedDesc\r\n                            ? ' ðŸ”½'\r\n                            : ' ðŸ”¼'\r\n                        : ''}\r\n                  </span>\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                {firstPageRows.map(\r\n                    (row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()} className=\"Comparison-row\">\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <td {...cell.getCellProps()} className=\"Comparison-row-cell\">{cell.render('Cell')}</td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )}\r\n                )}\r\n                </tbody>\r\n            </table>\r\n            <br />\r\n            {/*<div>Showing the first 20 results of {rows.length} rows</div>*/}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default function Comparison(props) {\r\n\r\n    const columns = React.useMemo(\r\n        () => {\r\n            var arr = props.collectionIds.map((id) => {\r\n                return {\r\n                    Header: props.results[\"file_information\"][id][\"title\"],\r\n                    accessor: id\r\n                }\r\n            });\r\n\r\n            var newArr = [{Header: \"File name\", accessor: \"name\"}, ...arr]\r\n            return newArr;\r\n        },\r\n        []\r\n    );\r\n\r\n    const data = React.useMemo(\r\n        () => {\r\n            return Object.entries(props.results[\"comparison\"]).map(file => {\r\n                const key = file[0];\r\n                const value = file[1];\r\n\r\n                var obj = {name: props.results[\"file_information\"][key][\"title\"]};\r\n\r\n                for (var i = 0; i < props.collectionIds.length; i++) {\r\n                    var id = props.collectionIds[i];\r\n\r\n                    obj[id.toString()] = value[id] ? '\\u2713' : \"\\u00d7\";\r\n                }\r\n\r\n                return obj;\r\n            })\r\n        },\r\n        []\r\n    );\r\n\r\n    // console.log(props.results);\r\n    // console.log(props.collectionIds);\r\n    console.log(columns);\r\n    console.log(data);\r\n\r\n    return (\r\n        <>\r\n            <div>Hold \"shift\" while clicking column names to sort by multiple columns.</div>\r\n            <Table columns={columns} data={data} />\r\n        </>\r\n    )\r\n\r\n}","import React, {useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport CompareMenu from \"./components/CompareMenu\";\r\nimport Comparison from \"./components/Comparison\";\r\n\r\nfunction App() {\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [displayResults, setDisplayResults] = useState(false);\r\n    const [collectionIds, setCollectionIds] = useState([]);\r\n\r\n    /**\r\n     * Retrieves the comparison information from the Flask server.\r\n     */\r\n    function compare(collections) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ \"collections\": collections })\r\n        };\r\n        fetch('/compare', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => setResults(data))\r\n            .then(data => setCollectionIds(collections))\r\n            .then(data => setDisplayResults(true));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {displayResults\r\n                ? <Comparison collectionIds={collectionIds} results={results}/>\r\n                : <CompareMenu compare={compare.bind(this)}/>\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}